!function (Raphael) {
    "use strict";
    angular.module("angular-raphael-gauge", []).directive("raphaelGauge", function () {
        return {
            restrict: "EA",
            scope: {config: "="},
            template: "<div></div>",
            replace: !0,
            controller: function ($scope, $element) {
                var options = {
                    element: $element[0].id,
                    name: !1,
                    value: 25,
                    image: !1,
                    icon: !1,
                    text: !1,
                    textColor: "#000000",
                    arcColor: "#57E0EA",
                    bgArcColor: "darkblue",
                    opacity: !1,
                    duration: 1600,
                    easing: "bounce"
                };
                options = $.extend(options, $scope.config), $("#" + options.element).html("");
                var radius = $("#" + options.element).width(), paper = new Raphael(options.element, radius, radius);
                $("#" + options.element + " svg").css({
                    height: "100%",
                    width: "100%"
                }), paper.setViewBox(0, 0, radius, radius, !0), paper.canvas.setAttribute("preserveAspectRatio", "none"), paper.customAttributes.arc = function (xloc, yloc, value, total, R) {
                    var path, alpha = 360 / total * value, a = (90 - alpha) * Math.PI / 180, x = xloc + R * Math.cos(a), y = yloc - R * Math.sin(a);
                    return path = total === value ? [["M", xloc, yloc - R], ["A", R, R, 0, 1, 1, xloc - .01, yloc - R]] : [["M", xloc, yloc - R], ["A", R, R, 0, +(alpha > 180), 1, x, y]], {path: path}
                };
                var counter = function (el, n, max) {
                    !function loop() {
                        el.html(n + "%"), n++ < max && setTimeout(loop, options.duration / max)
                    }()
                }, gaugeText = function (element, name) {
                    $("#" + element).html(name), $("#" + element).prepend('<div id="' + element + 'Percentage"></div>'), $("#" + element).css("font-size", $("#" + element).width() / 10 + "px"), $("#" + element + "Percentage").css("font-size", $("#" + element).width() / 4 + "px"), $(window).resize(function () {
                        $("#" + element).css("font-size", $("#" + element).width() / 10 + "px"), $("#" + element + "Percentage").css("font-size", $("#" + element).width() / 4 + "px")
                    }), counter($("#" + element + "Percentage"), 0, options.value)
                };
                if (options.image) {
                    paper.image(options.image, 0, 0, radius, radius)
                }
                if (options.text) {
                    paper.text(radius / 2, radius / 2, options.text).attr({
                        "font-size": radius / 16,
                        stroke: options.textColor,
                        fill: options.textColor
                    })
                }
                var newArc = !1, newArcBg = !1;
                $scope.$watch("config.value", function () {
                    if (options.value = $scope.config.value, newArc && newArc.remove(), newArcBg && newArcBg.remove(), newArcBg = paper.path().attr({
                            "stroke-opacity": options.opacity ? options.opacity : "1",
                            stroke: options.bgArcColor,
                            "stroke-width": .1 * radius,
                            arc: [radius / 2, radius / 2, 100, 100, .425 * radius]
                        }), newArc = paper.path().attr({
                            "stroke-opacity": options.opacity ? options.opacity : "1",
                            stroke: options.arcColor,
                            "stroke-width": .15 * radius,
                            arc: [radius / 2, radius / 2, 0, 100, .425 * radius]
                        }), newArc.hover(function () {
                            options.opacity && newArc.animate({"stroke-opacity": "1"}, 200)
                        }, function () {
                            options.opacity && newArc.animate({"stroke-opacity": options.opacity}, 200)
                        }), newArc.rotate(0, 100, 100).animate({arc: [radius / 2, radius / 2, options.value, 100, .425 * radius]}, options.duration, options.easing), options.name) {
                        var textName = options.element + "Text";
                        $("#" + options.element).append('<div class="canvasText" style="text-align:center;font-size: 3em;" id="' + textName + '"></div>'), gaugeText(textName, options.name, options.value)
                    }
                })
            }
        }
    })
}(Raphael);